// Copyright 2023 Blockchain Creative Labs LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// encrypt content - AES - use the symmetric put that in lit v3

import { getConfig } from '../../utils/config'
import { getClient } from './connect'
import { SiweMessage } from 'siwe'
import { decryptToFile, encryptFile } from '@lit-protocol/lit-node-client'
import { getDefaultAuth } from './access'
import { SiweMessageParams, ReturnType, AuthSig } from './types'
import { Wallet, ethers } from 'ethers'

/**
 * Returns an instance of the Wallet.
 *
 * @returns {Wallet} An instance of the Wallet.
 * @throws {Error} If the configuration is not properly set.
 *
 * @hidden
 */
export const getWalletInstance = (): Wallet => {
  const { pvtKey, rpcUrl } = getConfig()
  const wallet = new Wallet(
    pvtKey || '',
    new ethers.providers.JsonRpcProvider(rpcUrl)
  )

  return wallet
}

/**
 * Generates a SIWE (Signed In With Ethereum) message.
 *
 * @param {SiweMessageParams} params - The parameters for the SIWE message.
 * @param {string} params.address - The Ethereum address.
 * @param {string} params.chainId - The chain ID.
 * @param {string} [params.statement='authsign generated by an identity on verify'] - The statement to sign.
 * @param {string} [params.uri='http://localhost/login'] - The URI.
 * @param {string} [params.version='1'] - The version.
 * @param {string} [params.domain='localhost'] - The domain.
 *
 * @hidden
 * @returns {Promise<SiweMessage>} A promise that resolves with the SIWE message.
 */
export const generateSIWEMessage = async ({
  address,
  chainId,
  statement = 'authsign generated by an identity on verify',
  uri = 'http://localhost/login',
  version = '1',
  domain = 'localhost'
}: SiweMessageParams): Promise<SiweMessage> => {
  return new SiweMessage({
    domain,
    address: address,
    statement,
    uri,
    version,
    chainId,
    expirationTime: new Date(Date.now() + 1000 * 60 * 7).toISOString() // 7 minutes - set expiration time
  })
}

/**
 * Signs an authentication message.
 *
 * @returns {Promise<AuthSig>} A promise that resolves with the signed authentication message.
 * @throws {Error} If the LIT client is not initialized or the configuration is not properly set.
 *
 * @hidden
 */
export const signAuthMessage = async (): Promise<AuthSig> => {
  const { chainId } = getConfig()
  const wallet = getWalletInstance()
  await getClient()
  const siweMessage = await generateSIWEMessage({
    address: wallet.address,
    chainId
  })
  const messageToSign = siweMessage.prepareMessage()
  const signature = await wallet.signMessage(messageToSign)
  const authSig = {
    sig: signature,
    derivedVia: 'web3.eth.personal.sign',
    signedMessage: messageToSign,
    address: wallet.address
  }

  return authSig
}

/**
 * Encrypts the provided asset using the LIT protocol.
 *
 * @param {Object} params - The parameters for the function.
 * @param {Blob} params.content - The content of the asset to encrypt.
 * @param {string} params.contentHash - The hash of the content.
 *
 * @returns {Promise<{@link ReturnType}>} A promise that resolves with an object containing the encrypted content and the hash of the data to encrypt.
 * @throws {Error} Throws an error if the LIT client is not initialized.
 */
export const encryptAsset = async ({
  content,
  contentHash
}: {
  content: Blob
  contentHash: string
}): Promise<ReturnType> => {
  const { contractAddress, chain } = getConfig()
  const litClient = await getClient()
  if (!litClient) throw new Error('lit client not initialized')

  // get auth sig
  const authSig = await signAuthMessage()

  const authorization = getDefaultAuth(contentHash, chain, contractAddress)
  const encryptedContent = await encryptFile(
    {
      file: content,
      chain,
      authSig,
      unifiedAccessControlConditions: authorization
    },
    litClient
  )

  const { ciphertext, dataToEncryptHash } = encryptedContent

  return {
    ciphertext,
    dataToEncryptHash
  }
}

/**
 * Decrypts the provided asset using the [LIT](https://developer.litprotocol.com/v3/) protocol.
 *
 * @param {Object} params - The parameters for the function.
 * @param {string} params.ciphertext - The encrypted content.
 * @param {string} params.dataToEncryptHash - The hash of the data to encrypt.
 * @param {string} params.contentHash - The hash of the content.
 *
 * @returns {Promise<Uint8Array>} A promise that resolves with the decrypted asset.
 *
 * @throws {Error} Throws an error if the LIT client is not initialized.
 */
export const decryptAsset = async ({
  ciphertext,
  dataToEncryptHash,
  contentHash
}: {
  ciphertext: string
  dataToEncryptHash: string
  contentHash: string
}): Promise<Uint8Array> => {
  const { contractAddress, chain } = getConfig()
  const litClient = await getClient()
  if (!litClient) throw new Error('lit client not initialized')

  // get auth sig
  const authSig = await signAuthMessage()

  const authorization = getDefaultAuth(contentHash, chain, contractAddress)

  const asset = decryptToFile(
    {
      unifiedAccessControlConditions: authorization,
      ciphertext,
      dataToEncryptHash,
      authSig,
      chain
    },
    litClient
  )

  return asset
}
